# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHShnjno9bbD-oW3wdjTa74qFJwEiBqG

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing 

"""

#loading the dataset to a Pandas dataset

sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header=None)

sonar_data.head()

#number of rows and colums

sonar_data.shape

sonar_data.describe() #descirbe --> statical measure of the data

sonar_data[60].value_counts()

"""M --> Mine ||
R --> Rock

"""

sonar_data.groupby(60).mean()

#separatind data and labels

X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""Training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training --> Logic Regression 

"""

model = LogisticRegression()

#traing the Logistic Regression model with training data

print(X_train)
print(Y_train)

model.fit(X_train,Y_train)

"""Model Evaluation 

"""

#accuracy on training data

X_train_prediction = model.predict(X_train)
traing_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print("Accuracy on training data : ", traing_data_accuracy)

#accuracy on training data

X_test_prediction = model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print("Accuracy on test data : ", test_data_accuracy)

"""Making a predictive system """

input_data = (0.0114,0.0222,0.0269,0.0384,0.1217,0.2062,0.1489,0.0929,0.1350,0.1799,0.2486,0.2973,0.3672,0.4394,0.5258,0.6755,0.7402,0.8284,0.9033,0.9584,1.0000,0.9982,0.8899,0.7493,0.6367,0.6744,0.7207,0.6821,0.5512,0.4789,0.3924,0.2533,0.1089,0.1390,0.2551,0.3301,0.2818,0.2142,0.2266,0.2142,0.2354,0.2871,0.2596,0.1925,0.1256,0.1003,0.0951,0.1210,0.0728,0.0174,0.0213,0.0269,0.0152,0.0257,0.0097,0.0041,0.0050,0.0145,0.0103,0.0025)

#changing the input_data to a numpy array 

input_data_as_numpy_array = np.asarray(input_data)

#reshape the np array as we are predicting for one instance 

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print("The object is Rock")
else:
  print("Its a Mine !!!!")



